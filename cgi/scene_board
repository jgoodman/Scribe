#!/usr/bin/env perl

use strict;
use warnings;

BEGIN {
    eval 'use cPanelUserConfig';
}

use base qw(Scribe::App);
use CGI::Ex::Die register => 1;
use CGI::Ex::Dump qw(debug);

our $NO_ADD_MSG;
__PACKAGE__->navigate;

sub name_module { 'scribe/scene_board' }

sub url {
    my $self = shift;
    return $self->SUPER::url.'/cgi/scene_board';
}

sub path_info_map_base {
   my $self = shift;
   return [
       [qr{^/(\d+)/(\w+)}, 'project_id', $self->step_key],
       [qr{^/(\d+)},       'project_id'],
       #[qr{^/([^/]+)/(\w+)}, 'project', $self->step_key], # TODO do I ever want to do this?
       [qr{^/(\w+)},       $self->step_key],
   ];
}

# TODO put this in Scribe::App?
sub project {
    my $self = shift;
    my $project_id = $self->form->{'project_id'} || $self->project_id;
    return $project_id
         ? $self->schema->resultset('Project')->single({ project_id => $project_id })
         : undef;
}


###-----------------------------------------------------------------###


sub main_hash_swap {
    my $self = shift;

    my $hash = $self->SUPER::main_hash_swap;
    $hash->{'section'} = 'SceneBoard';

    my $project;
    unless($project = $self->project) {
        $self->cgix->location_bounce($self->url_cgi_project);
        return 0;
    }

    $hash->{'project_id'} = $project->project_id;

    # Get chapter
    # TODO At some point, implement multiple chapters
    $hash->{'chapter_id'} = $project->chapters->single->chapter_id;

    # Fetch scenes
    my $scenes = $project->chapters->search_related(
        'scenes', undef, { order_by => 'weight ASC, name ASC, scene_id ASC' }
    );

    my @rows;
    while (my $scene = $scenes->next) {
        my $summary = $scene->summary;
        if($scene->summ_tasks) {
            $summary = join ' ', map {
                my $task_obj = $_;
                my $char = $task_obj->character;
                my $char_name = $char ? $char->name : '';
                ($char_name ? "$char_name " : '').$task_obj->summary
            } $scene->tasks;
        }

        my $row = {
            scene_id      => $scene->scene_id,
            name          => $scene->name,
            summary       => $summary,
            color         => $scene->label->color,
            document_id   => '',
            document_name => '',
            place_id      => $scene->place_id,
        };
        if(my $doc = $scene->document) {
            $row->{'document_id'}   = $doc->document_id;
            $row->{'document_name'} = $doc->name,
        }
        push @rows, $row;
    }
    $hash->{'scenes'} = \@rows;
    $hash->{'success'} = $self->get_success;

    return $hash;
}


###-----------------------------------------------------------------###


sub scene_order_update_hash_swap { shift->_hash_swap_common('Update Scene Order') }

sub scene_order_update_hash_validation {
    my $self = shift;
    # TODO: Create validation here
    return { }
}

sub scene_order_update_finalize {
    my $self = shift;
    my $form = $self->form;

    if(my $scene_ids = $form->{'scene-id[]'}) {
        my $weight = 0;
        my $resultset = $self->schema->resultset('Scene');
        foreach my $scene_id (@$scene_ids) {
            $resultset->find({ scene_id => $scene_id })->update({weight => $weight});
            $weight += 1;
        }
    }

    return 0;
}


###-----------------------------------------------------------------###


# TODO move this out to cgi/document (or use ScribeDB)
sub document_hash_swap {
    my $self = shift;
    my %form = %{$self->form};

    my $url_theme = $self->url_theme;
    my $hash = $self->_hash_swap_common('Document');

    if(my $id = $form{'document_id'}) {
        my $document = $self->schema->resultset('Document')->find({ document_id => $id });
        $hash->{'document_url_address'} = $document->url_address;
    }

    return $hash;
}

sub document_hash_validation {
    my $self = shift;
    # TODO: Create validation here
    return { }
}


###-----------------------------------------------------------------###


# TODO move this out to cgi/place (or use ScribeDB)
sub place_add_hash_swap {
    my $self = shift;
    my $hash = $self->_hash_swap_common('Add Place');
    $hash->{'places'} = $self->flat_search('Place', undef, { order_by => { -asc => [qw/name/] } });
    return $hash;
}

sub place_add_hash_validation {
    my $self = shift;
    # TODO: Create validation here
    return { }
}

sub place_add_finalize {
    my $self = shift;

    my $place = $self->add_record('Place');
    $self->add_record('PlaceProject', {
        place_id   => $place->place_id,
        project_id => $self->form->{'project_id'},
    } );

    $self->cgix->location_bounce($self->url_cgi_board);
    return 0;
}


###-----------------------------------------------------------------###


# TODO move this out to cgi/character (or use ScribeDB)
sub character_add_hash_swap { shift->_hash_swap_common('Add Character') }

sub character_add_hash_validation {
    my $self = shift;
    # TODO: Create validation here
    return { }
}

sub character_add_finalize {
    my $self = shift;

    my $character = $self->add_record('Character');
    $self->add_record('CharacterProject', {
        character_id => $character->character_id,
        project_id   => $self->form->{'project_id'},
    } );

    $self->cgix->location_bounce($self->url_cgi_board);
    return 0;

}


###-----------------------------------------------------------------###


# TODO move this out to cgi/access_user (or use ScribeDB)
sub access_user_update_hash_swap { shift->_hash_swap_common('Update AccessUser') }

sub access_user_update_hash_validation {
    my $self = shift;
    # TODO: Create validation here
    return { }
}

sub access_user_update_finalize {
    my $self = shift;
    
    $self->schema->resultset('AccessUser')
        ->single({ name     => $self->auth_data->{'user'} })
        ->update({ password => $self->form->{'password'} });

    $self->set_success("AccessUser Updated");

    $self->cgix->location_bounce($self->url);
    return 0;
}


###-----------------------------------------------------------------###


sub more_tools_hash_swap { shift->_hash_swap_common('More Tools') }

sub _hash_swap_common {
    my $self = shift;
    my $headline = shift || die '$headline missing';
    my $url_theme = $self->url_theme;
    return {
        section  => $headline,
        css_crud => "$url_theme/common.css",
    }
}


###-----------------------------------------------------------------###


# TODO move this out to cgi/label (or use ScribeDB)
sub label_add_hash_swap { shift->_hash_swap_common('Add Label') }

sub label_add_hash_validation {
    my $self = shift;
    # TODO: Create validation here
    return { }
}

sub label_add_finalize { shift->add_finalize_common('Label') }

