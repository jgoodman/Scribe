#!/usr/bin/perl

use strict;
use warnings;

BEGIN {
    eval 'use cPanelUserConfig';
}

use base qw(Scribe::App);
use CGI::Ex::Die register => 1;
use CGI::Ex::Dump qw(debug);

our $NO_ADD_MSG;
__PACKAGE__->navigate;

sub name_module { 'scribe/scene' }

sub url { shift->SUPER::url.'/cgi/scene' }

sub main_hash_swap {
    my $self = shift;
    $self->cgix->location_bounce($self->url_cgi_board);
    return 0;
}


###-----------------------------------------------------------------###


sub add_hash_validation {
    my $self = shift;
    # TODO: Create validation here
    return { }
}

sub add_hash_swap {
    my $self = shift;
    my $crud = shift || 'add';

    my $default_weight = 0;
    my $sibling_scenes = $self->flat_search('Scene', undef, { order_by => { -desc => [qw/weight/] } });
    $default_weight = $sibling_scenes->[0]->{'weight'} + 1 if $sibling_scenes && $sibling_scenes->[0];


    my $places;
    my $characters;
    my $chapter_id = $self->form->{'chapter_id'};
    if(!$chapter_id && $crud eq 'edit') {
        $chapter_id = $self->schema->resultset('Scene')->single({ scene_id => $self->form->{'scene_id'} })->chapter_id;
    }
    if($chapter_id) {
        my $chapter    = $self->schema->resultset('Chapter')->single({ chapter_id => $chapter_id });
        my $project_id = $chapter->project_id;
        $characters = [
            map {
                { character_id => $_->character_id, name => $_->character->name }
            } $self->schema->resultset('CharacterProject')->search({ project_id => $project_id })
        ];
        $places = [
            map {
                { place_id => $_->place_id, name => $_->place->name }
            } $self->schema->resultset('PlaceProject')->search({ project_id => $project_id })
        ];
    }

    my $url_theme = $self->url_theme;
    return {
        section        => ucfirst($crud).' Scene',
        css_crud       => "$url_theme/$crud.css",
        characters     => $characters,
        places         => $places,
        labels         => $self->flat_search('Label', undef, { order_by => { -asc => [qw/name/] } }),
        default_weight => $default_weight,
        chapter_id     => $self->form->{'chapter_id'},
    }
}

sub add_finalize {
    my $self = shift;
    my %form = %{ $self->form };

    my $schema = $self->schema;
    my $url = delete $form{'document_url_address'};
    if(defined $url && $url ne '') {
        my $document = $schema->resultset('Document')->find_or_create({ url_address => $url });
        $form{'document_id'} = $document->document_id;
    }

    $form{'place_id'} = undef if defined $form{'place_id'} && $form{'place_id'} eq '';

    my $scene = $self->add_record('Scene', \%form);
    $self->project_id($scene->chapter->project->project_id);
    my $scene_id = $scene->scene_id;

    my $characters = ! defined $form{'characters[]'}      ? [ ]
                   : ref $form{'characters[]'} ne 'ARRAY' ? [ $form{'characters[]'} ]
                   : $form{'characters[]'};

    my $link_pkg = 'CharacterScene';
    my $link_args = { scene_id => $scene_id };
    $link_args->{'character_id'} = { 'not in' => $characters } if scalar @$characters;
    foreach my $link_obj ($schema->resultset($link_pkg)->search($link_args)) {
        $link_obj->delete;
        $self->set_success('Character #'.$link_obj->character_id.' unlinked to Scene #'.$link_obj->scene_id);
    }
    foreach my $character_id (@$characters) {
        $link_args->{'character_id'} = $character_id;
        next if $schema->resultset($link_pkg)->find($link_args);
        local $NO_ADD_MSG = 1;
        my $link_obj = $self->add_record($link_pkg, $link_args);
        $self->set_success('Character #'.$link_obj->character_id.' linked to Scene #'.$link_obj->scene_id);
    }

    $self->cgix->location_bounce($self->url_cgi_board);
    return 0;
}


###-----------------------------------------------------------------###


sub edit_skip { shift->form->{'scene_id'} ? 0 : 1 }

sub edit_hash_common {
    my $self = shift;

    my $ret = $self->add_hash_swap('edit');
    return $ret if $self->ready_validate;

    my %form = %{ $self->form };
    my $scene_id = $form{'scene_id'};

    my $pkg = 'Scene';
    my $schema = $self->schema;
    my $scene_obj = $schema->resultset($pkg)->find({ scene_id => $scene_id }) or die 'Scene not found';
    $self->project_id($scene_obj->chapter->project->project_id);

    my $scene;
    foreach my $col ($schema->source($pkg)->columns) {
        $scene->{$col} = $scene_obj->$col;
    }

    # TODO DBIx::Class has a way to access this data more easily
    my $document = $schema->resultset('Document')->find({ document_id => $scene_obj->document_id });
    $scene->{'document_url_address'} = $document->url_address if $document;

    $scene->{'characters'} = [ map { $_->character_id } $schema->resultset('CharacterScene')->search({ scene_id => $scene_id }) ];

    my @task_cols = $schema->source('Task')->columns;
    $scene->{'tasks'} = [ map {
        my $task_obj = $_;
        my %task;
        foreach my $col (@task_cols) {
            $task{$col} = $task_obj->$col
        }

        my $label_obj = $task_obj->label;
        if($label_obj) {
            $task{'label_name'}  = $label_obj->name;
            $task{'label_color'} = $label_obj->color;
        }

        my $character_obj = $task_obj->character;
        $task{'character_name'} = $character_obj->name if $character_obj;

        \%task;
    } $scene_obj->tasks ];

    $ret->{'scene'} = $scene;
    return $ret;
}

sub edit_hash_validation {
    my $self = shift;
    my $hash = $self->add_hash_validation;
    # TODO: validate scene_id
    return $hash;
}


sub edit_finalize {
    my $self = shift;
    my %form = %{ $self->form };

    my $pkg    = 'Scene';
    my $schema = $self->schema;
    my $scene  = $schema->resultset($pkg)->find({ scene_id => $form{'scene_id'} }) or die 'Scene not found';
    $self->project_id($scene->chapter->project->project_id);
    $form{'chapter_id'} ||= $scene->chapter_id;

    $form{'document_id'} = undef unless exists $form{'document_id'};
    my $url = delete $form{'document_url_address'};
    if(defined $url && $url ne '') {
        my $document = $schema->resultset('Document')->find_or_create({ url_address => $url });
        $form{'document_id'} = $document->document_id if $document;
    }

    $form{'place_id'} = undef if defined $form{'place_id'} && $form{'place_id'} eq '';

    my %update_args;
    foreach my $col ($schema->source($pkg)->columns) {
        next if $col eq 'scene_id';
        my $value = $form{$col};
        $update_args{$col} = $value;
    }

    my $scene_id = $scene->update(\%update_args)->scene_id;

    $self->set_success("Scene #$scene_id Updated");

    my $characters = ! defined $form{'characters[]'}      ? [ ]
                   : ref $form{'characters[]'} ne 'ARRAY' ? [ $form{'characters[]'} ]
                   : $form{'characters[]'};

    my $link_pkg = 'CharacterScene';
    my $link_args = { scene_id => $scene_id };
    $link_args->{'character_id'} = { 'not in' => $characters } if scalar @$characters;
    foreach my $link_obj ($schema->resultset($link_pkg)->search($link_args)) {
        $link_obj->delete;
        $self->set_success('Character #'.$link_obj->character_id.' unlinked to Scene #'.$link_obj->scene_id);
    }
    foreach my $character_id (@$characters) {
        $link_args->{'character_id'} = $character_id;
        next if $schema->resultset($link_pkg)->find($link_args);
        my $tmp = $NO_ADD_MSG;
        $NO_ADD_MSG = 1;
        my $link_obj = $self->add_record($link_pkg, $link_args);
        $NO_ADD_MSG = $tmp;
        $self->set_success('Character #'.$link_obj->character_id.' linked to Scene #'.$link_obj->scene_id);
    }

    $self->cgix->location_bounce($self->url_cgi_board);
    return 0;
}


###-----------------------------------------------------------------###


sub view_hash_common { shift->edit_hash_common(@_) }


###-----------------------------------------------------------------###


sub delete_hash_swap {
    my $self  = shift;

    my %form = %{$self->form};

    if(my $scene_id = $form{'scene_id'}) {
        $self->schema->resultset('CharacterScene')->search({ scene_id => $scene_id })->delete;

        my $scene_obj = $self->schema->resultset('Scene')->find({ scene_id => $scene_id });
        $self->project_id($scene_obj->chapter->project->project_id);
        $scene_obj->delete;

        $self->set_success("Scene #$scene_id Deleted");
        $self->cgix->location_bounce($self->url_cgi_board);
        return 0;
    }

    my $url_theme = $self->url_theme;
    return {
        section  => 'Delete Scene',
        css_crud => "$url_theme/common.css",
    }
}

sub delete_hash_validation {
    my $self = shift;
    # TODO: Create validation here
    return { }
}

