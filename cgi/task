#!/usr/bin/perl

use strict;
use warnings;

BEGIN {
    eval 'use cPanelUserConfig';
}

use base qw(Scribe::App);
use CGI::Ex::Die register => 1;
use CGI::Ex::Dump qw(debug);

our $NO_ADD_MSG;
__PACKAGE__->navigate;

sub name_module { 'scribe/task' }

sub url { shift->SUPER::url.'/cgi/task' }

sub main_hash_swap {
    my $self = shift;
    $self->cgix->location_bounce($self->url_cgi_board);
    return 0;
}


###-----------------------------------------------------------------###


sub add_hash_validation {
    my $self = shift;
    # TODO: Create validation here
    return { }
}

sub add_hash_swap {
    my $self = shift;
    my $crud = shift || 'add';
    my $form = shift || $self->form;

    my $default_weight = 0;
    if(my $scene_id = $form->{'scene_id'}) {
        my $sibling_tasks = $self->flat_search('Task', { scene_id => $scene_id }, { order_by => { -desc => [qw/weight/] } });
        $default_weight = $sibling_tasks->[0]->{'weight'} + 1 if $sibling_tasks && $sibling_tasks->[0];
    }

    my $url_theme = $self->url_theme;
    return {
        section        => ucfirst($crud).' Task',
        css_crud       => "$url_theme/$crud.css",
        characters     => $self->flat_search('Character', undef, { order_by => { -asc => [qw/name/] } }),
        labels         => $self->flat_search('Label',     undef, { order_by => { -asc => [qw/name/] } }),
        scenes         => $self->flat_search('Scene',     undef, { order_by => { -asc => [qw/weight/] } }),
        default_weight => $default_weight,
    }
}

sub add_finalize {
    my $self = shift;
    my %form = %{ $self->form };

    foreach my $col (qw(label_id character_id scene_id)) {
        delete $form{$col} if defined $form{$col} && $form{$col} eq '';
    }

    my $task_obj = $self->add_record('Task', \%form);

    $self->cgix->location_bounce($self->_bounce_url($task_obj));
    return 0;
}

sub _bounce_url {
    my $self = shift;
    my $task_obj = shift;

    my $bounce_url = $self->url_cgi_board;
    if(my $scene_id = $task_obj->scene_id) {
        $bounce_url = $self->url_cgi."/scene/edit?scene_id=$scene_id";
    }

    return $bounce_url;
}


###-----------------------------------------------------------------###


sub edit_skip { shift->form->{'task_id'} ? 0 : 1 }

sub edit_hash_common {
    my $self = shift;
    my %form = %{ $self->form };

    my $ret = $self->add_hash_swap('edit', \%form);
    return $ret if $self->ready_validate;

    if(my $task_id = $form{'task_id'}) {
        my $pkg = 'Task';
        my $schema = $self->schema;
        my $task_obj = $schema->resultset($pkg)->find({ task_id => $task_id }) or die "$pkg not found";

        my $task = $ret->{'task'} = { };
        foreach my $col ($schema->source($pkg)->columns) {
            $task->{$col} = $task_obj->$col;
        }
    }

    return $ret;
}

sub edit_hash_validation {
    my $self = shift;
    my $hash = $self->add_hash_validation;
    # TODO: validate task_id
    return $hash;
}

sub edit_finalize {
    my $self = shift;
    my %form = %{ $self->form };

    my $pkg      = 'Task';
    my $schema   = $self->schema;
    my $task_obj = $schema->resultset($pkg)->find({ task_id => $form{'task_id'} }) or die "$pkg not found";

    foreach my $col (qw(label_id scene_id character_id)) {
        $form{$col} = undef if defined $form{$col} && $form{$col} eq '';
    }

    my %update_args;
    foreach my $col ($schema->source($pkg)->columns) {
        next if $col eq 'task_id';
        $update_args{$col} = $form{$col};
    }

    $task_obj = $task_obj->update(\%update_args);
    my $task_id = $task_obj->task_id;
    $self->set_success("$pkg #$task_id Updated");

    $self->cgix->location_bounce($self->_bounce_url($task_obj));
    return 0;
}


###-----------------------------------------------------------------###


sub delete_hash_swap {
    my $self  = shift;

    my %form = %{$self->form};

    my $pkg = 'Task';
    if(my $task_id = $form{'task_id'}) {
        my $task_obj = $self->schema->resultset($pkg)->find({ task_id => $task_id });
        $task_obj->delete;
        $self->set_success("$pkg #$task_id Deleted");
        $self->cgix->location_bounce($self->_bounce_url($task_obj));
        return 0;
    }

    my $url_theme = $self->url_theme;
    return {
        section  => "Delete $pkg",
        css_crud => "$url_theme/common.css",
    }
}

sub delete_hash_validation {
    my $self = shift;
    # TODO: Create validation here
    return { }
}
